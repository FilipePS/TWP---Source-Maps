{"version":3,"file":"../../background/textToSpeech.js","names":["textToSpeech","Service","constructor","serviceName","baseURL","xhrMethod","cbGetExtraParameters","audios","Map","audioSpeed","getRequests","fullText","fullTextSplitted","trim","split","forEach","word","length","push","slice","requests","requestString","text","makeRequest","targetLanguage","Promise","resolve","reject","xhr","XMLHttpRequest","onload","e","reader","FileReader","onloadend","result","onerror","readAsDataURL","response","console","error","open","responseType","send","promises","requestText","audioKey","join","get","then","set","Audio","catch","all","play","map","stopAll","Array","playAll","currentIndex","audio","playbackRate","onended","HTMLAudioElement","setAudioSpeed","speed","pause","currentTime","googleService","getExtraParameters","encodeURIComponent","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","finally","twpConfig","onReady","onChanged","name","newvalue","google"],"sources":["textToSpeech.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst textToSpeech = (function () {\r\n  const textToSpeech = {};\r\n\r\n  /**\r\n   * @callback Callback_Speech_cbGetExtraParameters\r\n   * @param {string} text\r\n   * @param {string} targetLanguage\r\n   * @return {string} urlParamsString\r\n   */\r\n\r\n  class Service {\r\n    /**\r\n     * Defines the Service class for the text-to-speech service.\r\n     * @param {string} serviceName\r\n     * @param {string} baseURL\r\n     * @param {\"GET\" | \"POST\"} xhrMethod\r\n     * @param {Callback_Speech_cbGetExtraParameters} cbGetExtraParameters\r\n     */\r\n    constructor(serviceName, baseURL, xhrMethod, cbGetExtraParameters) {\r\n      this.serviceName = serviceName;\r\n      this.baseURL = baseURL;\r\n      this.xhrMethod = xhrMethod;\r\n      this.cbGetExtraParameters = cbGetExtraParameters;\r\n      /** @type {Map<string, HTMLAudioElement>} */\r\n      this.audios = new Map();\r\n      this.audioSpeed = 1.0;\r\n    }\r\n\r\n    /**\r\n     * Takes a long text and splits the text into an array of strings. Each string will be less than 170 characters.\r\n     *\r\n     * The goal is not to exceed the quota for text-to-speech services.\r\n     * @param {string} fullText\r\n     * @returns {string[]} requestStrings\r\n     */\r\n    getRequests(fullText) {\r\n      /** @type {string[]} */\r\n      const fullTextSplitted = [];\r\n      fullText\r\n        .trim()\r\n        .split(\" \")\r\n        .forEach((word) => {\r\n          if (word.length > 160) {\r\n            while (word.length > 160) {\r\n              fullTextSplitted.push(word.slice(0, 160));\r\n              word = word.slice(160);\r\n            }\r\n            if (word.trim().length > 0) {\r\n              fullTextSplitted.push(word);\r\n            }\r\n          } else if (word.trim().length > 0) {\r\n            fullTextSplitted.push(word);\r\n          }\r\n        });\r\n\r\n      /** @type {string[]} */\r\n      const requests = [];\r\n      let requestString = \"\";\r\n      for (let text of fullTextSplitted) {\r\n        text += \" \";\r\n        if (requestString.length + text.length < 170) {\r\n          requestString += text;\r\n        } else {\r\n          requests.push(requestString);\r\n          requestString = text;\r\n        }\r\n      }\r\n      if (requestString.trim().length > 0) {\r\n        requests.push(requestString);\r\n        requestString = \"\";\r\n      }\r\n\r\n      return requests;\r\n    }\r\n\r\n    /**\r\n     * Makes the request to the text-to-speech service and returns a promise that resolves with the result of the request.\r\n     *\r\n     * The promise is rejected if there is an error.\r\n     * @param {string} text\r\n     * @param {string} targetLanguage\r\n     * @returns {Promise<any>} Promise\\<blob\\>\r\n     */\r\n    async makeRequest(text, targetLanguage) {\r\n      return await new Promise((resolve, reject) => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.onload = (e) => {\r\n          const reader = new FileReader();\r\n          reader.onloadend = () => resolve(reader.result);\r\n          reader.onerror = () => reject();\r\n          reader.readAsDataURL(xhr.response);\r\n        };\r\n        xhr.onerror = (e) => {\r\n          console.error(e);\r\n          reject();\r\n        };\r\n        xhr.open(\r\n          this.xhrMethod,\r\n          this.baseURL + this.cbGetExtraParameters(text, targetLanguage)\r\n        );\r\n        xhr.responseType = \"blob\";\r\n        xhr.send();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Transform text into audio and play then.\r\n     * @param {string} fullText\r\n     * @param {string} targetLanguage\r\n     * @returns {Promise<void>} Promise\\<void\\>\r\n     */\r\n    async textToSpeech(fullText, targetLanguage) {\r\n      const requests = this.getRequests(fullText);\r\n      const promises = [];\r\n\r\n      for (const requestText of requests) {\r\n        const audioKey = [targetLanguage, requestText].join(\", \");\r\n        if (!this.audios.get(audioKey)) {\r\n          promises.push(\r\n            this.makeRequest(requestText, targetLanguage)\r\n              .then(\r\n                /** @type {string} */ (response) => {\r\n                  this.audios.set(audioKey, new Audio(response));\r\n                  return response;\r\n                }\r\n              )\r\n              .catch((e) => {\r\n                console.error(e);\r\n                return null;\r\n              })\r\n          );\r\n        }\r\n      }\r\n\r\n      await Promise.all(promises);\r\n      return await this.play(\r\n        requests.map((text) =>\r\n          this.audios.get([targetLanguage, text].join(\", \"))\r\n        )\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Play the audio or all the audio in the array.\r\n     * @param {HTMLAudioElement | HTMLAudioElement[]} audios\r\n     */\r\n    async play(audios) {\r\n      this.stopAll();\r\n      return await new Promise((resolve) => {\r\n        try {\r\n          if (audios instanceof Array) {\r\n            const playAll = (/** @type {number} */ currentIndex) => {\r\n              this.stopAll();\r\n              const audio = audios[currentIndex];\r\n              if (audio) {\r\n                audio.playbackRate = this.audioSpeed;\r\n                audio.play();\r\n                audio.onended = () => {\r\n                  playAll(currentIndex + 1);\r\n                };\r\n              } else {\r\n                resolve();\r\n              }\r\n            };\r\n            playAll(0);\r\n          } else if (audios instanceof HTMLAudioElement) {\r\n            audios.playbackRate = this.audioSpeed;\r\n            audios.play();\r\n            audios.onended = () => {\r\n              resolve();\r\n            };\r\n          }\r\n        } catch (e) {\r\n          console.error(e);\r\n          resolve();\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Sets the audio speed\r\n     * @param {number} speed\r\n     */\r\n    setAudioSpeed(speed) {\r\n      this.audioSpeed = speed;\r\n      this.audios.forEach((audio) => {\r\n        audio.playbackRate = this.audioSpeed;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Pause all audio and reset audio time to start\r\n     */\r\n    stopAll() {\r\n      this.audios.forEach((audio) => {\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create a Service instance based on google's text-to-speech service.\r\n  const googleService = new Service(\r\n    \"google\",\r\n    \"https://translate.google.com/translate_tts?ie=UTF-8\",\r\n    \"GET\",\r\n    function getExtraParameters(text, targetLanguage) {\r\n      return `&tl=${targetLanguage}&client=dict-chrome-ex&ttsspeed=0.5&q=${encodeURIComponent(\r\n        text\r\n      )}`;\r\n    }\r\n  );\r\n\r\n  // Listen for messages coming from contentScript or other scripts.\r\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    if (request.action === \"textToSpeech\") {\r\n      googleService\r\n        .textToSpeech(request.text, request.targetLanguage)\r\n        .finally(() => {\r\n          sendResponse();\r\n        });\r\n\r\n      return true;\r\n    } else if (request.action === \"stopAudio\") {\r\n      googleService.stopAll();\r\n    }\r\n  });\r\n\r\n  // Listen for changes to the audio speed setting and apply it immediately.\r\n  twpConfig.onReady(async () => {\r\n    twpConfig.onChanged((name, newvalue) => {\r\n      if (name === \"ttsSpeed\") {\r\n        googleService.setAudioSpeed(newvalue);\r\n      }\r\n    });\r\n  });\r\n\r\n  textToSpeech.google = googleService;\r\n\r\n  return textToSpeech;\r\n})();\r\n"],"mappings":"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"}