{"version":3,"file":"../../background/translationCache.js","names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","t","has","TypeError","_assertClassBrand","n","arguments","length","translationCache","_Cache","Utils","getTableSize","db","storageName","Promise","resolve","reject","size","transaction","objectStore","openCursor","onsuccess","event","cursor","result","storedObject","value","json","JSON","stringify","continue","onerror","err","getDatabaseSize","dbName","request","indexedDB","open","onblocked","console","error","tableNames","objectStoreNames","tableSizeGetters","reduce","acc","tableName","push","all","then","sizes","total","val","catch","close","humanReadableSize","bytes","thresh","Math","abs","units","u","toFixed","stringToSHA1String","message","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","map","b","toString","padStart","join","_Cache_brand","WeakSet","Cache","constructor","translationService","sourceLanguage","targetLanguage","cache","Map","promiseStartingCache","start","openDataBaseCache","deleteDatabase","query","originalText","hash","translation","get","_queryInDB","call","set","translatedText","detectedLanguage","_addInDb","key","getDataBaseName","getCacheStorageName","openIndexeddb","name","version","objectStorageNames","info","onupgradeneeded","createObjectStore","keyPath","origTextHash","data","put","_CacheList_brand","CacheList","list","_openCacheList","getCache","_createCache","deleteAll","promises","forEach","clear","dbnames","_getAllDBNames","DBDeleteRequest","warn","calculateSize","results","dbCacheList","_addCacheList","_addCache","getAllKeys","cacheList","deleteTranslationCache","reload","chrome","runtime","promiseCalculatingStorage","onMessage","addListener","sender","sendResponse","action"],"sources":["translationCache.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst translationCache = (function () {\r\n  const translationCache = {};\r\n\r\n  /**\r\n   * @typedef {Object} CacheEntry\r\n   * @property {String} originalText\r\n   * @property {String} translatedText\r\n   * @property {String} detectedLanguage\r\n   * @property {String} key\r\n   */\r\n\r\n  class Utils {\r\n    /**\r\n     * Returns the size of a ObjectStorage\r\n     * @param {IDBDatabase} db\r\n     * @param {string} storageName\r\n     * @returns {Promise<number>} Promise\\<size\\>\r\n     */\r\n    static async getTableSize(db, storageName) {\r\n      return await new Promise((resolve, reject) => {\r\n        if (db == null) return reject();\r\n        let size = 0;\r\n        const transaction = db\r\n          .transaction([storageName])\r\n          .objectStore(storageName)\r\n          .openCursor();\r\n\r\n        transaction.onsuccess = (event) => {\r\n          const cursor = transaction.result;\r\n          if (cursor) {\r\n            const storedObject = cursor.value;\r\n            const json = JSON.stringify(storedObject);\r\n            size += json.length;\r\n            cursor.continue();\r\n          } else {\r\n            resolve(size);\r\n          }\r\n        };\r\n        transaction.onerror = (err) =>\r\n          reject(\"error in \" + storageName + \": \" + err);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Returns the size of a database\r\n     * @param {string} dbName\r\n     * @returns {Promise<number>} Promise\\<size\\>\r\n     */\r\n    static async getDatabaseSize(dbName) {\r\n      return await new Promise((resolve, reject) => {\r\n        const request = indexedDB.open(dbName);\r\n        request.onerror = request.onblocked = (event) => {\r\n          console.error(event);\r\n          reject();\r\n        };\r\n        request.onsuccess = (event) => {\r\n          try {\r\n            const db = request.result;\r\n            const tableNames = [...db.objectStoreNames];\r\n            ((tableNames, db) => {\r\n              const tableSizeGetters = tableNames.reduce((acc, tableName) => {\r\n                acc.push(Utils.getTableSize(db, tableName));\r\n                return acc;\r\n              }, []);\r\n\r\n              Promise.all(tableSizeGetters)\r\n                .then((sizes) => {\r\n                  const total = sizes.reduce((acc, val) => acc + val, 0);\r\n                  resolve(total);\r\n                })\r\n                .catch((e) => {\r\n                  console.error(e);\r\n                  reject();\r\n                });\r\n            })(tableNames, db);\r\n          } finally {\r\n            request.result.close();\r\n          }\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Converts a size in bytes to a human-readable string.\r\n     * @example\r\n     * humanReadableSize(1024)\r\n     * // returns \"1.0KB\"\r\n     * @param {number} bytes\r\n     * @returns {string} sizeString\r\n     */\r\n    static humanReadableSize(bytes) {\r\n      const thresh = 1024;\r\n      if (Math.abs(bytes) < thresh) {\r\n        return bytes + \" B\";\r\n      }\r\n      const units = [\"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n      let u = -1;\r\n      do {\r\n        bytes /= thresh;\r\n        ++u;\r\n      } while (Math.abs(bytes) >= thresh && u < units.length - 1);\r\n      return bytes.toFixed(1) + \" \" + units[u];\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise that resolves to a sha1 string of the given text.\r\n     * @example\r\n     * await stringToSHA1String(\"Hello World!\")\r\n     * // returns \"2ef7bde608ce5404e97d5f042f95f89f1c232871\"\r\n     * @param {string} message text\r\n     * @returns {Promise<string>} Promise\\<sha1String\\>\r\n     */\r\n    static async stringToSHA1String(message) {\r\n      const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n      const hashBuffer = await crypto.subtle.digest(\"SHA-1\", msgUint8); // hash the message\r\n      const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n      return hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n    }\r\n  }\r\n\r\n  class Cache {\r\n    /**\r\n     * Base class to create a translation cache for different services.\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     */\r\n    constructor(translationService, sourceLanguage, targetLanguage) {\r\n      /** @type {string} */\r\n      this.translationService = translationService;\r\n      /** @type {string} */\r\n      this.sourceLanguage = sourceLanguage;\r\n      /** @type {string} */\r\n      this.targetLanguage = targetLanguage;\r\n      /** @type {Map<string, CacheEntry>} */\r\n      this.cache = new Map();\r\n      /** @type {Promise<boolean>} */\r\n      this.promiseStartingCache = null;\r\n    }\r\n\r\n    /**\r\n     * Start the translation cache\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async start() {\r\n      if (this.promiseStartingCache) return await this.promiseStartingCache;\r\n      this.promiseStartingCache = new Promise((resolve) => {\r\n        Cache.openDataBaseCache(\r\n          this.translationService,\r\n          this.sourceLanguage,\r\n          this.targetLanguage\r\n        )\r\n          .then((db) => {\r\n            this.db = db;\r\n            resolve(true);\r\n          })\r\n          .catch((e) => {\r\n            console.error(e);\r\n            Cache.deleteDatabase(\r\n              this.translationService,\r\n              this.sourceLanguage,\r\n              this.targetLanguage\r\n            );\r\n            resolve(false);\r\n          });\r\n      });\r\n      return await this.promiseStartingCache;\r\n    }\r\n\r\n    /**\r\n     * Closes the database.\r\n     */\r\n    close() {\r\n      if (this.db) this.db.close();\r\n      this.db = null;\r\n    }\r\n\r\n    /**\r\n     * Queries an entry in the translation cache, through the hash of the source text.\r\n     * @param {string} origTextHash\r\n     * @returns {Promise<CacheEntry>}\r\n     */\r\n    async #queryInDB(origTextHash) {\r\n      return await new Promise((resolve, reject) => {\r\n        if (!this.db) return reject();\r\n\r\n        const storageName = Cache.getCacheStorageName();\r\n        const objectStore = this.db\r\n          .transaction([storageName], \"readonly\")\r\n          .objectStore(storageName);\r\n        const request = objectStore.get(origTextHash);\r\n\r\n        request.onsuccess = (event) => {\r\n          const result = request.result;\r\n          resolve(result);\r\n        };\r\n\r\n        request.onerror = (event) => {\r\n          console.error(event);\r\n          reject();\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Query translation cache data\r\n     * @param {string} originalText\r\n     * @returns {Promise<CacheEntry>}\r\n     */\r\n    async query(originalText) {\r\n      const hash = await Utils.stringToSHA1String(originalText);\r\n\r\n      let translation = this.cache.get(hash);\r\n      if (translation) return translation;\r\n\r\n      translation = await this.#queryInDB(hash);\r\n      if (translation) this.cache.set(hash, translation);\r\n\r\n      return translation;\r\n    }\r\n\r\n    /**\r\n     * Store the data in the database\r\n     * @param {CacheEntry} data\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async #addInDb(data) {\r\n      return await new Promise((resolve) => {\r\n        if (!this.db) return resolve(false);\r\n\r\n        const storageName = Cache.getCacheStorageName();\r\n        const objectStore = this.db\r\n          .transaction([storageName], \"readwrite\")\r\n          .objectStore(storageName);\r\n        const request = objectStore.put(data);\r\n\r\n        request.onsuccess = (event) => {\r\n          resolve(true);\r\n        };\r\n\r\n        request.onerror = (event) => {\r\n          console.error(event);\r\n          resolve(false);\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Add to translation cache\r\n     * @param {string} originalText\r\n     * @param {string} translatedText\r\n     * @param {string} detectedLanguage\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async add(originalText, translatedText, detectedLanguage = \"und\") {\r\n      const hash = await Utils.stringToSHA1String(originalText);\r\n      return await this.#addInDb({\r\n        originalText,\r\n        translatedText,\r\n        detectedLanguage,\r\n        key: hash,\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the database using the given data.\r\n     * @example\r\n     * getDataBaseName(\"google\", \"de\", \"en\")\r\n     * // returns \"google@de.en\"\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     * @returns {string} databaseName\r\n     */\r\n    static getDataBaseName(translationService, sourceLanguage, targetLanguage) {\r\n      return `${translationService}@${sourceLanguage}.${targetLanguage}`;\r\n    }\r\n\r\n    /**\r\n     * Returns the storageName\r\n     * @example\r\n     * getCacheStorageName()\r\n     * // returns \"cache\"\r\n     * @returns {string} storageName\r\n     */\r\n    static getCacheStorageName() {\r\n      return \"cache\";\r\n    }\r\n\r\n    /**\r\n     * Start/create a database with the given data.\r\n     * @param {string} name\r\n     * @param {number} version\r\n     * @param {string[]} objectStorageNames\r\n     * @returns {Promise<IDBDatabase>}\r\n     */\r\n    static async openIndexeddb(name, version, objectStorageNames) {\r\n      return await new Promise((resolve, reject) => {\r\n        const request = indexedDB.open(name, version);\r\n\r\n        request.onsuccess = (event) => {\r\n          console.info(request.result);\r\n          resolve(request.result);\r\n        };\r\n\r\n        request.onerror = request.onblocked = (event) => {\r\n          console.error(\r\n            \"Error opening the database, switching to non-database mode\",\r\n            event\r\n          );\r\n          reject();\r\n        };\r\n\r\n        request.onupgradeneeded = (event) => {\r\n          const db = request.result;\r\n\r\n          for (const storageName of objectStorageNames) {\r\n            db.createObjectStore(storageName, {\r\n              keyPath: \"key\",\r\n            });\r\n          }\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Start/create a database for the translation cache with the given data.\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     * @returns {Promise<IDBDatabase>}\r\n     */\r\n    static async openDataBaseCache(\r\n      translationService,\r\n      sourceLanguage,\r\n      targetLanguage\r\n    ) {\r\n      const dbName = Cache.getDataBaseName(\r\n        translationService,\r\n        sourceLanguage,\r\n        targetLanguage\r\n      );\r\n      const storageName = Cache.getCacheStorageName();\r\n      const db = await Cache.openIndexeddb(dbName, 1, [storageName]);\r\n      return db;\r\n    }\r\n\r\n    /**\r\n     * Delete a database.\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    static async deleteDatabase(\r\n      translationService,\r\n      sourceLanguage,\r\n      targetLanguage\r\n    ) {\r\n      return await new Promise((resolve) => {\r\n        try {\r\n          const dbName = Cache.getDataBaseName(\r\n            translationService,\r\n            sourceLanguage,\r\n            targetLanguage\r\n          );\r\n          const request = indexedDB.deleteDatabase(dbName);\r\n\r\n          request.onsuccess = (event) => {\r\n            resolve(true);\r\n          };\r\n\r\n          request.onerror = (event) => {\r\n            console.error(event);\r\n            resolve(false);\r\n          };\r\n        } catch (e) {\r\n          console.error(e);\r\n          resolve(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  class CacheList {\r\n    /**\r\n     * Defines a translation cache manager.\r\n     */\r\n    constructor() {\r\n      /** @type {Map<string, Cache>} */\r\n      this.list = new Map();\r\n      try {\r\n        this.#openCacheList();\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Starts the connection to the database cacheList.\r\n     */\r\n    #openCacheList() {\r\n      const request = indexedDB.open(\"cacheList\", 1);\r\n\r\n      request.onsuccess = (event) => {\r\n        this.dbCacheList = request.result;\r\n\r\n        // If any translation cache was created while waiting for the cacheList to be created.\r\n        // Then add all these entries to the cacheList.\r\n        this.list.forEach((cache, key) => {\r\n          this.#addCacheList(key);\r\n        });\r\n      };\r\n\r\n      request.onerror = request.onblocked = (event) => {\r\n        console.error(\"Error opening the database\", event);\r\n        this.dbCacheList = null;\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const db = request.result;\r\n\r\n        db.createObjectStore(\"cache_list\", {\r\n          keyPath: \"dbName\",\r\n        });\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Stores a new translation cache name to cacheList.\r\n     * @param {string} dbName\r\n     */\r\n    #addCacheList(dbName) {\r\n      if (!this.dbCacheList) return;\r\n\r\n      const storageName = \"cache_list\";\r\n      const objectStore = this.dbCacheList\r\n        .transaction([storageName], \"readwrite\")\r\n        .objectStore(storageName);\r\n      const request = objectStore.put({ dbName });\r\n\r\n      request.onsuccess = (event) => {};\r\n\r\n      request.onerror = (event) => {\r\n        console.error(event);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Create and start a translation cache then add to cacheList.\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     * @returns {Promise<Cache>}\r\n     */\r\n    async #createCache(translationService, sourceLanguage, targetLanguage) {\r\n      const cache = new Cache(\r\n        translationService,\r\n        sourceLanguage,\r\n        targetLanguage\r\n      );\r\n      this.#addCache(translationService, sourceLanguage, targetLanguage, cache);\r\n      try {\r\n        await cache.start();\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      return cache;\r\n    }\r\n\r\n    /**\r\n     * Get a translation cache from the given data.\r\n     * If the translation cache does not exist, create a new one.\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     * @returns {Promise<Cache>}\r\n     */\r\n    async getCache(translationService, sourceLanguage, targetLanguage) {\r\n      const dbName = Cache.getDataBaseName(\r\n        translationService,\r\n        sourceLanguage,\r\n        targetLanguage\r\n      );\r\n      const cache = this.list.get(dbName);\r\n      if (cache) {\r\n        await cache.promiseStartingCache;\r\n        return cache;\r\n      } else {\r\n        return await this.#createCache(\r\n          translationService,\r\n          sourceLanguage,\r\n          targetLanguage\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Adds a new translation cache name to the \"list\" and if possible stores it in the cacheList database.\r\n     * @param {string} translationService\r\n     * @param {string} sourceLanguage\r\n     * @param {string} targetLanguage\r\n     * @param {Cache} cache\r\n     */\r\n    #addCache(translationService, sourceLanguage, targetLanguage, cache) {\r\n      const dbName = Cache.getDataBaseName(\r\n        translationService,\r\n        sourceLanguage,\r\n        targetLanguage\r\n      );\r\n      this.list.set(dbName, cache);\r\n      try {\r\n        this.#addCacheList(dbName);\r\n      } catch {}\r\n    }\r\n\r\n    /**\r\n     * Get the name of all translation caches.\r\n     * @example\r\n     * #getAllDBNames()\r\n     * // returns [\"google@de.en\", \"google@zh-CN.es\", \"yandex@ru.pt\"]\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    async #getAllDBNames() {\r\n      if (!this.dbCacheList) return [];\r\n      return await new Promise((resolve) => {\r\n        const storageName = \"cache_list\";\r\n        const objectStore = this.dbCacheList\r\n          .transaction([storageName], \"readonly\")\r\n          .objectStore(storageName);\r\n        const request = objectStore.getAllKeys();\r\n\r\n        request.onsuccess = (event) => {\r\n          // TODO this cast is realy necessary?\r\n          //cast\r\n          resolve(/** @type {string[]} */ (request.result));\r\n        };\r\n\r\n        request.onerror = (event) => {\r\n          console.error(event);\r\n          resolve([]);\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Delete all translation caches.\r\n     * And clear the cache list.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async deleteAll() {\r\n      try {\r\n        /** @type {Array<Promise>} */\r\n        const promises = [];\r\n        this.list.forEach((cache, key) => {\r\n          if (cache) cache.close();\r\n          promises.push(CacheList.deleteDatabase(key));\r\n        });\r\n        this.list.clear();\r\n        const dbnames = await this.#getAllDBNames();\r\n        dbnames.forEach((dbName) => {\r\n          promises.push(CacheList.deleteDatabase(dbName));\r\n        });\r\n        await Promise.all(promises);\r\n        return true;\r\n      } catch (e) {\r\n        console.error(e);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Delete a database by its name.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    static async deleteDatabase(dbName) {\r\n      return await new Promise((resolve) => {\r\n        const DBDeleteRequest = indexedDB.deleteDatabase(dbName);\r\n\r\n        DBDeleteRequest.onsuccess = () => {\r\n          console.info(\"Database deleted successfully\");\r\n          resolve(true);\r\n        };\r\n\r\n        DBDeleteRequest.onerror = () => {\r\n          console.warn(\"Error deleting database.\");\r\n          resolve(false);\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Gets the sum of the size of all translation caches.\r\n     * @example\r\n     * await calculateSize()\r\n     * // returns \"1.0MB\"\r\n     * @returns {Promise<string>}\r\n     */\r\n    async calculateSize() {\r\n      try {\r\n        /** @type {Array<Promise>} */\r\n        const promises = [];\r\n        const dbnames = await this.#getAllDBNames();\r\n        dbnames.forEach((dbName) => {\r\n          promises.push(Utils.getDatabaseSize(dbName));\r\n        });\r\n        const results = await Promise.all(promises);\r\n        return Utils.humanReadableSize(\r\n          results.reduce((total, size) => total + size, 0)\r\n        );\r\n      } catch (e) {\r\n        console.error(e);\r\n        return Utils.humanReadableSize(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create a translation cache list.\r\n  const cacheList = new CacheList();\r\n\r\n  /**\r\n   * Get a new translation cache entry.\r\n   * @param {string} translationService\r\n   * @param {string} sourceLanguage\r\n   * @param {string} targetLanguage\r\n   * @param {string} originalText\r\n   * @returns {Promise<CacheEntry>} cacheEntry\r\n   */\r\n  translationCache.get = async (\r\n    translationService,\r\n    sourceLanguage,\r\n    targetLanguage,\r\n    originalText\r\n  ) => {\r\n    try {\r\n      const cache = await cacheList.getCache(\r\n        translationService,\r\n        sourceLanguage,\r\n        targetLanguage\r\n      );\r\n      return await cache.query(originalText);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Defines a new entry in the translation cache.\r\n   * @param {string} translationService\r\n   * @param {string} sourceLanguage\r\n   * @param {string} targetLanguage\r\n   * @param {string} originalText\r\n   * @param {string} translatedText\r\n   * @param {string} detectedLanguage\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  translationCache.set = async (\r\n    translationService,\r\n    sourceLanguage,\r\n    targetLanguage,\r\n    originalText,\r\n    translatedText,\r\n    detectedLanguage\r\n  ) => {\r\n    try {\r\n      const cache = await cacheList.getCache(\r\n        translationService,\r\n        sourceLanguage,\r\n        targetLanguage\r\n      );\r\n      return await cache.add(originalText, translatedText, detectedLanguage);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete all translation caches.\r\n   * If `reload` is `true` reloads the extension after deleting caches.\r\n   * @param {boolean} reload\r\n   */\r\n  translationCache.deleteTranslationCache = async (reload = false) => {\r\n    try {\r\n      // Deletes old translation cache.\r\n      if (indexedDB && indexedDB.deleteDatabase) {\r\n        indexedDB.deleteDatabase(\"googleCache\");\r\n        indexedDB.deleteDatabase(\"yandexCache\");\r\n        indexedDB.deleteDatabase(\"bingCache\");\r\n      }\r\n      // Delete the new translation cache.\r\n      await cacheList.deleteAll();\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      if (reload) chrome.runtime.reload();\r\n    }\r\n  };\r\n\r\n  let promiseCalculatingStorage = null;\r\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    if (request.action === \"getCacheSize\") {\r\n      if (!promiseCalculatingStorage) {\r\n        promiseCalculatingStorage = cacheList.calculateSize();\r\n      }\r\n\r\n      promiseCalculatingStorage\r\n        .then((size) => {\r\n          promiseCalculatingStorage = null;\r\n          sendResponse(size);\r\n          return size;\r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n          promiseCalculatingStorage = null;\r\n          sendResponse(\"0B\");\r\n          return \"0B\";\r\n        });\r\n      return true;\r\n    } else if (request.action === \"deleteTranslationCache\") {\r\n      translationCache.deleteTranslationCache(request.reload);\r\n    }\r\n  });\r\n\r\n  return translationCache;\r\n})();\r\n"],"mappings":"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","ignoreList":[]}